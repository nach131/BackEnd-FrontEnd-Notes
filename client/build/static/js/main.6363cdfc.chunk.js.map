{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","axios","get","then","response","data","initialNotes","console","log","length","notesToShow","filter","toggleImportanceOf","id","find","n","changedNote","newObject","put","update","returnedNote","map","catch","error","setTimeout","Notification","message","className","Footer","style","color","fontStyle","fontSize","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","post","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCRpCI,EAAU,aCwHDC,EArHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAOhBC,qBAAU,WDPMC,IAAMC,IAAIb,GACXc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QCQpCF,MAAK,SAAAG,GACJb,EAASa,QAEZ,IACHC,QAAQC,IAAI,SAAUhB,EAAMiB,OAAQ,SAGpC,IAuBMC,EAAcd,EAChBJ,EACAA,EAAMmB,QAAO,SAAA5B,GAAI,OAAuB,IAAnBA,EAAKG,aAExB0B,EAAqB,SAAAC,GACzB,IAAM9B,EAAOS,EAAMsB,MAAK,SAAAC,GAAC,OAAIA,EAAEF,KAAOA,KAChCG,EAAW,2BAAQjC,GAAR,IAAcG,WAAYH,EAAKG,aDpC9B,SAAC2B,EAAII,GAEzB,OADgBhB,IAAMiB,IAAN,UAAa7B,EAAb,YAAwBwB,GAAMI,GAC/Bd,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCoCvCc,CAAON,EAAIG,GACRb,MAAK,SAAAiB,GACJ3B,EAASD,EAAM6B,KAAI,SAAAtC,GAAI,OAAIA,EAAK8B,KAAOA,EAAK9B,EAAOqC,SAEpDE,OAAM,SAAAC,GACLxB,EAAgB,SAAD,OACJhB,EAAKI,QADD,sCAGfqC,YAAW,WACTzB,EAAgB,QACf,KACHN,EAASD,EAAMmB,QAAO,SAAAI,GAAC,OAAIA,EAAEF,KAAOA,UAIpCY,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKC,UAAU,QAAf,SACGD,KAMDE,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,8DAKN,OACE,gCACE,uCACA,cAACP,EAAD,CAAcC,QAAS5B,IACvB,8BACE,yBAAQV,QAAS,kBAAMS,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGc,EAAYW,KAAI,SAACtC,GAAD,OACf,cAAC,EAAD,CAAoBA,KAAMA,EACxBC,iBAAkB,kBAAM4B,EAAmB7B,EAAK8B,MADvC9B,EAAK8B,SAKpB,uBAAMoB,SAzFM,SAACC,GACfA,EAAMC,iBACN,IDdkBlB,ECcZmB,EAAa,CACjBjD,QAASO,EACT2C,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,GAC3B5B,GAAIrB,EAAMiB,OAAS,IDlBHQ,ECqBXmB,EDpBOnC,IAAMyC,KAAKrD,EAAS4B,GACrBd,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCoBpCF,MAAK,SAAAiB,GACJ3B,EAASD,EAAMmD,OAAOvB,IACtBzB,EAAW,QA6Eb,UACE,uBACEiD,MAAOlD,EACPmD,SA1EiB,SAACX,GACxB3B,QAAQC,IAAI0B,EAAMY,OAAOF,OACzBjD,EAAWuC,EAAMY,OAAOF,UA0EpB,wBAAQG,KAAK,SAAb,qBAEF,cAACnB,EAAD,Q,MC9GNoB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6363cdfc.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nexport const getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nexport const create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nexport const update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport { getAll, create, update } from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n\n  useEffect(() => {\n    getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    }\n\n    create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n  }\n\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n\n  const Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, enunpimpam.com</em>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) =>\n          <Note key={note.id} note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App';\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}